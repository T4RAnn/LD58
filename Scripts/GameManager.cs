using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using UnityEngine.SceneManagement;
public class GameManager : MonoBehaviour
{
    [Header("–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã")]
    public DeckManager deckManager;
    public BattleManager battleManager;
    public RewardManager rewardManager;

    [Header("–°–ª–æ—Ç—ã")]
    public CardSlot playerSlot;
    public EnemySlot enemySlot;

    [Header("–í—Ä–∞–∂–µ—Å–∫–∏–µ –≤–æ–ª–Ω—ã")]
    public List<EnemyWave> enemyWaves;
    public int currentWaveIndex = 0;

    public int cardsPerTurn = 3;
    private bool isPlayerTurn = true;

    [Header("UI –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–µ–º")]
    public Button pauseButton;
    public Button normalButton;
    public Button fastButton;
    public GameObject rewardPanel; // UI –ø–∞–Ω–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã

    private void Start()
    {
        StartPlayerTurn();
        StartWave(currentWaveIndex);

        // –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
        if (pauseButton != null) pauseButton.onClick.AddListener(TogglePause);
        if (normalButton != null) normalButton.onClick.AddListener(SetNormalMode);
        if (fastButton != null) fastButton.onClick.AddListener(SetFastMode);
    }

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞–º–∏ ---
    public void StartPlayerTurn()
    {
        isPlayerTurn = true;
        deckManager.DrawCards(cardsPerTurn);
    }

    public void EndTurn()
    {
        if (!isPlayerTurn) return;
        isPlayerTurn = false;

        // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏ –≤ discard
        deckManager.EndTurn();

        // –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–±–æ–π
        battleManager.StartBattle();
    }

    // --- –ó–∞–ø—É—Å–∫ –≤–æ–ª–Ω—ã –≤—Ä–∞–≥–æ–≤ ---
    public void StartWave(int index)
    {
        ClearEnemies();

        if (index >= enemyWaves.Count)
        {
            Debug.Log("–í—Å–µ –≤–æ–ª–Ω—ã –ø–æ–±–µ–∂–¥–µ–Ω—ã! üéâ");
            return;
        }

        // –±–µ—Ä—ë–º –Ω—É–∂–Ω—É—é –≤–æ–ª–Ω—É
        EnemyWave wave = enemyWaves[index];

        // –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Ä–∞–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≤–æ–ª–Ω—ã
        foreach (CardData enemyCard in wave.enemies)
        {
            if (enemyCard == null || enemyCard.creaturePrefab == null) continue;

            GameObject enemyGO = Instantiate(enemyCard.creaturePrefab, enemySlot.transform);
            CreatureInstance creature = enemyGO.GetComponent<CreatureInstance>();
            creature.Initialize(enemyCard.attack, enemyCard.health, true, enemyCard);
        }

        Debug.Log($"–í–æ–ª–Ω–∞ {index + 1} –Ω–∞—á–∞–ª–∞—Å—å!");
    }

    // --- –û—á–∏—Å—Ç–∫–∞ –≤—Ä–∞–≥–æ–≤ –º–µ–∂–¥—É –±–æ—è–º–∏ ---
    private void ClearEnemies()
    {
        foreach (Transform child in enemySlot.transform)
        {
            Destroy(child.gameObject);
        }
    }

    // --- –í—ã–∑–æ–≤ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã ---

public void OnBattleWon()
{
    Debug.Log("–ü–æ–±–µ–¥–∞! ‚úÖ");

    ClearAllSlots();
    ResetDeck();

    // —Å–∫—Ä—ã—Ç—å —Å–ª–æ—Ç—ã –Ω–∞ –≤—Ä–µ–º—è –Ω–∞–≥—Ä–∞–¥—ã
    playerSlot.gameObject.SetActive(false);
    enemySlot.gameObject.SetActive(false);

    // –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
    rewardPanel.SetActive(true);
    rewardManager.ShowRewards();
}

// --- –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ ---
private void ClearAllSlots()
{
    // --- –∏–≥—Ä–æ–∫ ---
    foreach (Transform child in playerSlot.slotPanel)
    {
        CreatureInstance creature = child.GetComponent<CreatureInstance>();
        if (creature != null && creature.cardData != null && !creature.isEnemy)
        {
            // –≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç—É –≤ —Å–±—Ä–æ—Å
            DeckManager.Instance.DiscardCard(creature.cardData);
        }

        Destroy(child.gameObject);
    }

    // --- –≤—Ä–∞–≥–∏ ---
    foreach (Transform child in enemySlot.transform)
    {
        Destroy(child.gameObject); // –≤—Ä–∞–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –∫–æ–ª–æ–¥—É
    }
}


// --- –°–±—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –∫–æ–ª–æ–¥—É ---
private void ResetDeck()
{
    // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë –∏–∑ —Ä—É–∫–∏ –≤ —Å–±—Ä–æ—Å
    DeckManager.Instance.EndTurn();

    // –í–µ—Ä–Ω—É—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã –∏–∑ —Å–±—Ä–æ—Å–∞ –≤ –∫–æ–ª–æ–¥—É
    DeckManager.Instance.deck.AddRange(DeckManager.Instance.discardPile);
    DeckManager.Instance.discardPile.Clear();

    // –ü–µ—Ä–µ–º–µ—à–∞—Ç—å
    var deck = DeckManager.Instance.deck;
    for (int i = 0; i < deck.Count; i++)
    {
        var temp = deck[i];
        int randomIndex = Random.Range(i, deck.Count);
        deck[i] = deck[randomIndex];
        deck[randomIndex] = temp;
    }

    Debug.Log("–í—Å–µ –∫–∞—Ä—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –∫–æ–ª–æ–¥—É –∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã");
}


    // --- –í—ã–∑–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è ---
    public void OnBattleLost()
    {
        Debug.Log("–ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª ‚ùå");
        // —Ä–µ—Å—Ç–∞—Ä—Ç —Å—Ü–µ–Ω—ã
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
    }

    // --- –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
    private void TogglePause()
    {
        battleManager.isPaused = !battleManager.isPaused;
        Debug.Log(battleManager.isPaused ? "–ë–æ–π –Ω–∞ –ø–∞—É–∑–µ" : "–ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è");
    }

    private void SetNormalMode()
    {
        battleManager.battleDelay = 1.0f;
        battleManager.isPaused = false;
        Debug.Log("–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏");
    }

    private void SetFastMode()
    {
        battleManager.battleDelay = 0.25f;
        battleManager.isPaused = false;
        Debug.Log("–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏");
    }
}

[System.Serializable]
public class EnemyWave
{
    public List<CardData> enemies; // —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ –¥–ª—è —ç—Ç–æ–π –≤–æ–ª–Ω—ã
}