using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.SceneManagement;
using TMPro;

public class GameManager : MonoBehaviour
{
    [Header("–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã")]
    public DeckManager deckManager;
    public BattleManager battleManager;
    public RewardManager rewardManager;

    [Header("–°–ª–æ—Ç—ã")]
    public CardSlot playerSlot;
    public EnemySlot enemySlot;

    [Header("–í—Ä–∞–∂–µ—Å–∫–∏–µ –≤–æ–ª–Ω—ã")]
    public List<EnemyWave> enemyWaves;
    public int currentWaveIndex = 0;

    public int cardsPerTurn = 3;
    private bool isPlayerTurn = true;

    [Header("UI –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–µ–º")]
    public Button pauseButton;
    public Button normalButton;
    public Button fastButton;
    public GameObject rewardPanel;
    public CanvasGroup fadePanel; // –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ

    [Header("UI –¢–µ–∫—Å—Ç –ø–æ–±–µ–¥—ã")]
    public GameObject victoryTextUI; // —Ç–µ–∫—Å—Ç "YOU WON!"

private void Start()
{
    if (victoryTextUI != null)
        victoryTextUI.SetActive(false); // —Ç–æ—á–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    if (fadePanel != null)
        StartCoroutine(FadeIn(1.2f));

    StartPlayerTurn();
    StartWave(currentWaveIndex);

    if (pauseButton != null) pauseButton.onClick.AddListener(TogglePause);
    if (normalButton != null) normalButton.onClick.AddListener(SetNormalMode);
    if (fastButton != null) fastButton.onClick.AddListener(SetFastMode);
}


    // === –ü–ª–∞–≤–Ω–æ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ / –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ ===
    private IEnumerator FadeIn(float duration = 1f)
    {
        fadePanel.alpha = 1f;
        fadePanel.gameObject.SetActive(true);
        while (fadePanel.alpha > 0f)
        {
            fadePanel.alpha -= Time.deltaTime / duration;
            yield return null;
        }
        fadePanel.alpha = 0f;
        fadePanel.gameObject.SetActive(false);
    }

    private IEnumerator FadeOut(float duration = 1f)
    {
        fadePanel.gameObject.SetActive(true);
        fadePanel.alpha = 0f;
        while (fadePanel.alpha < 1f)
        {
            fadePanel.alpha += Time.deltaTime / duration;
            yield return null;
        }
        fadePanel.alpha = 1f;
    }

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ–¥–∞–º–∏ ---
    public void StartPlayerTurn()
    {
        isPlayerTurn = true;
        deckManager.DrawCards(cardsPerTurn);
    }

    public void EndTurn()
    {
        if (!isPlayerTurn) return;
        isPlayerTurn = false;

        deckManager.EndTurn();
        battleManager.StartBattle();
    }

    // --- –í–æ–ª–Ω—ã –≤—Ä–∞–≥–æ–≤ ---
    public void StartWave(int index)
    {
        ClearEnemies();

        if (index >= enemyWaves.Count)
        {
            Debug.Log("–í—Å–µ –≤–æ–ª–Ω—ã –ø–æ–±–µ–∂–¥–µ–Ω—ã! üéâ");
            return;
        }

        EnemyWave wave = enemyWaves[index];

        foreach (CardData enemyCard in wave.enemies)
        {
            if (enemyCard == null || enemyCard.creaturePrefab == null) continue;

            GameObject enemyGO = Instantiate(enemyCard.creaturePrefab, enemySlot.transform);
            CreatureInstance creature = enemyGO.GetComponent<CreatureInstance>();
            creature.Initialize(enemyCard.attack, enemyCard.health, true, enemyCard);
        }

        Debug.Log($"–í–æ–ª–Ω–∞ {index + 1} –Ω–∞—á–∞–ª–∞—Å—å!");
    }

    private void ClearEnemies()
    {
        foreach (Transform child in enemySlot.transform)
        {
            Destroy(child.gameObject);
        }
    }

    // --- –ü–æ–±–µ–¥–∞ ---
    public void OnBattleWon()
    {
        StartCoroutine(HandleBattleWonTransition());
    }

private IEnumerator HandleBattleWonTransition()
{


    Debug.Log("–ü–æ–±–µ–¥–∞! ‚úÖ");

    // –∑–∞—Ç–µ–º–Ω—è–µ–º —ç–∫—Ä–∞–Ω
    yield return StartCoroutine(FadeOut(0.8f));

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ –≤–æ–ª–Ω–∞
    bool isLastWave = currentWaveIndex >= enemyWaves.Count - 1;

    if (victoryTextUI != null)
    {
        victoryTextUI.SetActive(true);
        CanvasGroup cg = victoryTextUI.GetComponent<CanvasGroup>();
        if (cg == null) cg = victoryTextUI.AddComponent<CanvasGroup>();
        cg.alpha = 0;
        Vector3 originalScale = victoryTextUI.transform.localScale;
        victoryTextUI.transform.localScale = originalScale * 0.5f;

        TMP_Text tmpText = victoryTextUI.GetComponent<TMP_Text>();
        if (tmpText != null)
        {
            tmpText.text = isLastWave ? "Thank you for playing!" : "YOU WON!";
        }

        float duration = 0.5f;
        for (float t = 0; t <= 1; t += Time.deltaTime / duration)
        {
            cg.alpha = t;
            victoryTextUI.transform.localScale = Vector3.Lerp(originalScale * 0.5f, originalScale, t);
            yield return null;
        }
        
        // üîä –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ –ø–æ–±–µ–¥—ã
            AudioManager.Instance?.PlayVictory();
        
        // –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–ª–Ω–∞ ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏ —Å–ø—Ä—è—á–µ–º —Ç–µ–∫—Å—Ç
            if (!isLastWave)
            {
                yield return new WaitForSeconds(1.5f);
                for (float t = 1; t >= 0; t -= Time.deltaTime / duration)
                {
                    cg.alpha = t;
                    victoryTextUI.transform.localScale = Vector3.Lerp(originalScale * 0.5f, originalScale, t);
                    yield return null;
                }
                victoryTextUI.SetActive(false);
                victoryTextUI.transform.localScale = originalScale;
            }
            else
            {
                // –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–ª–Ω–∞ ‚Äî —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞—ë—Ç—Å—è, —ç–∫—Ä–∞–Ω —á–µ—Ä–Ω—ã–π
                cg.alpha = 1f;
                victoryTextUI.transform.localScale = originalScale;
            }
    }

    // –æ—á–∏—Å—Ç–∫–∞ —Å–ª–æ—Ç–æ–≤ –∏ –∫–æ–ª–æ–¥—ã
    ClearAllSlots();
    ResetDeck();

    // —Å–∫—Ä—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–∞–≥—Ä–∞–¥—ã
    playerSlot.gameObject.SetActive(false);
    enemySlot.gameObject.SetActive(false);

    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞–≥—Ä–∞–¥
    rewardPanel.SetActive(true);

        // üéØ –ù–∞–≥—Ä–∞–¥—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω—ã
        if (!isLastWave && currentWaveIndex < enemyWaves.Count)
        {
            rewardPanel.SetActive(true); // –≤–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –±—É–¥—É—Ç –Ω–∞–≥—Ä–∞–¥—ã
            List<CardData> currentEnemies = enemyWaves[currentWaveIndex].enemies;
            if (currentEnemies != null && currentEnemies.Count > 0)
            {
                rewardManager.ShowRewardsFromEnemies(currentEnemies);
            }
        }
        else
        {
            rewardPanel.SetActive(false); // –µ—Å–ª–∏ –Ω–∞–≥—Ä–∞–¥ –Ω–µ—Ç ‚Äî –ø–∞–Ω–µ–ª—å –≤—ã–∫–ª—é—á–µ–Ω–∞
        }

    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–æ–ª–Ω–∞
    if (!isLastWave)
        yield return StartCoroutine(FadeIn(0.8f));
}



    // --- –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –Ω–∞–≥—Ä–∞–¥—ã ---
    public IEnumerator TransitionToNextWave()
    {
        yield return StartCoroutine(FadeOut(0.8f));

        playerSlot.gameObject.SetActive(true);
        enemySlot.gameObject.SetActive(true);

        StartWave(currentWaveIndex);
        StartPlayerTurn();

        yield return StartCoroutine(FadeIn(0.8f));
    }

    private void ClearAllSlots()
    {
        foreach (Transform child in playerSlot.slotPanel)
        {
            CreatureInstance creature = child.GetComponent<CreatureInstance>();
            if (creature != null && !creature.isEnemy && creature.cardData != null)
            {
                DeckManager.Instance.StartCoroutine(
                    DeckManager.Instance.AnimateToDiscardCard(creature.cardData, child.gameObject)
                );
            }
        }

        foreach (Transform child in enemySlot.transform)
        {
            Destroy(child.gameObject);
        }
    }

    private void ResetDeck()
    {
        DeckManager.Instance.EndTurn();
        DeckManager.Instance.deck.AddRange(DeckManager.Instance.discardPile);
        DeckManager.Instance.discardPile.Clear();

        var deck = DeckManager.Instance.deck;
        for (int i = 0; i < deck.Count; i++)
        {
            var temp = deck[i];
            int randomIndex = Random.Range(i, deck.Count);
            deck[i] = deck[randomIndex];
            deck[randomIndex] = temp;
        }

        Debug.Log("–í—Å–µ –∫–∞—Ä—Ç—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –∫–æ–ª–æ–¥—É –∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã");
    }

    public void OnBattleLost()
    {
        StartCoroutine(RestartWithFade());
    }

    private IEnumerator RestartWithFade()
    {
        yield return StartCoroutine(FadeOut(0.8f));
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
    }

    private void TogglePause()
    {
        battleManager.isPaused = !battleManager.isPaused;
        Debug.Log(battleManager.isPaused ? "–ë–æ–π –Ω–∞ –ø–∞—É–∑–µ" : "–ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è");
    }

    private void SetNormalMode()
    {
        battleManager.battleDelay = 1.0f;
        battleManager.isPaused = false;
        Debug.Log("–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏");
    }

    private void SetFastMode()
    {
        battleManager.battleDelay = 0.25f;
        battleManager.isPaused = false;
        Debug.Log("–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏");
    }
}

[System.Serializable]
public class EnemyWave
{
    public List<CardData> enemies;
    [Tooltip("–ò–Ω–¥–µ–∫—Å –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –Ω–∞–¥ —ç—Ç–æ–π –≤–æ–ª–Ω–æ–π")]
    public int rewardTemplateIndex = 0;
}
